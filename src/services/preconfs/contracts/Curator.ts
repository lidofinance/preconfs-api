/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export interface CuratorInterface extends utils.Interface {
  functions: {
    'DEFAULT_MAX_VALIDATORS()': FunctionFragment;
    'getOperator(address)': FunctionFragment;
    'managerAddress()': FunctionFragment;
    'maxValidatorsForModule(uint256)': FunctionFragment;
    'operators(address)': FunctionFragment;
    'optIn(address,string,uint256,uint256,uint256,uint256)': FunctionFragment;
    'optOut(uint256,uint256)': FunctionFragment;
    'setMaxValidatorsForStakingModule(uint256,uint256)': FunctionFragment;
    'stakingRouterAddress()': FunctionFragment;
    'updateKeysRange(uint256,uint256,uint256,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_MAX_VALIDATORS'
      | 'getOperator'
      | 'managerAddress'
      | 'maxValidatorsForModule'
      | 'operators'
      | 'optIn'
      | 'optOut'
      | 'setMaxValidatorsForStakingModule'
      | 'stakingRouterAddress'
      | 'updateKeysRange',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'DEFAULT_MAX_VALIDATORS',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'getOperator', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'managerAddress',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'maxValidatorsForModule',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'operators', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'optIn',
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'optOut',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaxValidatorsForStakingModule',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'stakingRouterAddress',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'updateKeysRange',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;

  decodeFunctionResult(
    functionFragment: 'DEFAULT_MAX_VALIDATORS',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOperator',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'managerAddress',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'maxValidatorsForModule',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'operators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'optIn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'optOut', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setMaxValidatorsForStakingModule',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'stakingRouterAddress',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateKeysRange',
    data: BytesLike,
  ): Result;

  events: {
    'OptInSucceeded(address,address,string,uint256,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OptInSucceeded'): EventFragment;
}

export interface OptInSucceededEventObject {
  rewardAddress: string;
  optInAddress: string;
  rpcURL: string;
  moduleId: BigNumber;
  operatorId: BigNumber;
  keysRangeStart: BigNumber;
  keysRangeEnd: BigNumber;
}
export type OptInSucceededEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  OptInSucceededEventObject
>;

export type OptInSucceededEventFilter = TypedEventFilter<OptInSucceededEvent>;

export interface Curator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CuratorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_MAX_VALIDATORS(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOperator(
      rewardAddress: string,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isActive: boolean;
        optInAddress: string;
        rpcURL: string;
        moduleId: BigNumber;
        operatorId: BigNumber;
        keysRangeStart: BigNumber;
        keysRangeEnd: BigNumber;
      }
    >;

    managerAddress(overrides?: CallOverrides): Promise<[string]>;

    maxValidatorsForModule(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    operators(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isActive: boolean;
        optInAddress: string;
        rpcURL: string;
        moduleId: BigNumber;
        operatorId: BigNumber;
        keysRangeStart: BigNumber;
        keysRangeEnd: BigNumber;
      }
    >;

    optIn(
      optInAddress: string,
      rpcURL: string,
      moduleId: BigNumberish,
      operatorId: BigNumberish,
      keysRangeStart: BigNumberish,
      keysRangeEnd: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    optOut(
      moduleId: BigNumberish,
      operatorId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setMaxValidatorsForStakingModule(
      moduleId: BigNumberish,
      maxValidators: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    stakingRouterAddress(overrides?: CallOverrides): Promise<[string]>;

    updateKeysRange(
      moduleId: BigNumberish,
      operatorId: BigNumberish,
      newKeysRangeStart: BigNumberish,
      newKeysRangeEnd: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  DEFAULT_MAX_VALIDATORS(overrides?: CallOverrides): Promise<BigNumber>;

  getOperator(
    rewardAddress: string,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      isActive: boolean;
      optInAddress: string;
      rpcURL: string;
      moduleId: BigNumber;
      operatorId: BigNumber;
      keysRangeStart: BigNumber;
      keysRangeEnd: BigNumber;
    }
  >;

  managerAddress(overrides?: CallOverrides): Promise<string>;

  maxValidatorsForModule(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  operators(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      isActive: boolean;
      optInAddress: string;
      rpcURL: string;
      moduleId: BigNumber;
      operatorId: BigNumber;
      keysRangeStart: BigNumber;
      keysRangeEnd: BigNumber;
    }
  >;

  optIn(
    optInAddress: string,
    rpcURL: string,
    moduleId: BigNumberish,
    operatorId: BigNumberish,
    keysRangeStart: BigNumberish,
    keysRangeEnd: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  optOut(
    moduleId: BigNumberish,
    operatorId: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setMaxValidatorsForStakingModule(
    moduleId: BigNumberish,
    maxValidators: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  stakingRouterAddress(overrides?: CallOverrides): Promise<string>;

  updateKeysRange(
    moduleId: BigNumberish,
    operatorId: BigNumberish,
    newKeysRangeStart: BigNumberish,
    newKeysRangeEnd: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_MAX_VALIDATORS(overrides?: CallOverrides): Promise<BigNumber>;

    getOperator(
      rewardAddress: string,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isActive: boolean;
        optInAddress: string;
        rpcURL: string;
        moduleId: BigNumber;
        operatorId: BigNumber;
        keysRangeStart: BigNumber;
        keysRangeEnd: BigNumber;
      }
    >;

    managerAddress(overrides?: CallOverrides): Promise<string>;

    maxValidatorsForModule(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    operators(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isActive: boolean;
        optInAddress: string;
        rpcURL: string;
        moduleId: BigNumber;
        operatorId: BigNumber;
        keysRangeStart: BigNumber;
        keysRangeEnd: BigNumber;
      }
    >;

    optIn(
      optInAddress: string,
      rpcURL: string,
      moduleId: BigNumberish,
      operatorId: BigNumberish,
      keysRangeStart: BigNumberish,
      keysRangeEnd: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    optOut(
      moduleId: BigNumberish,
      operatorId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaxValidatorsForStakingModule(
      moduleId: BigNumberish,
      maxValidators: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    stakingRouterAddress(overrides?: CallOverrides): Promise<string>;

    updateKeysRange(
      moduleId: BigNumberish,
      operatorId: BigNumberish,
      newKeysRangeStart: BigNumberish,
      newKeysRangeEnd: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'OptInSucceeded(address,address,string,uint256,uint256,uint256,uint256)'(
      rewardAddress?: null,
      optInAddress?: null,
      rpcURL?: null,
      moduleId?: null,
      operatorId?: null,
      keysRangeStart?: null,
      keysRangeEnd?: null,
    ): OptInSucceededEventFilter;
    OptInSucceeded(
      rewardAddress?: null,
      optInAddress?: null,
      rpcURL?: null,
      moduleId?: null,
      operatorId?: null,
      keysRangeStart?: null,
      keysRangeEnd?: null,
    ): OptInSucceededEventFilter;
  };

  estimateGas: {
    DEFAULT_MAX_VALIDATORS(overrides?: CallOverrides): Promise<BigNumber>;

    getOperator(
      rewardAddress: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    managerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    maxValidatorsForModule(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    operators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    optIn(
      optInAddress: string,
      rpcURL: string,
      moduleId: BigNumberish,
      operatorId: BigNumberish,
      keysRangeStart: BigNumberish,
      keysRangeEnd: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    optOut(
      moduleId: BigNumberish,
      operatorId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setMaxValidatorsForStakingModule(
      moduleId: BigNumberish,
      maxValidators: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    stakingRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    updateKeysRange(
      moduleId: BigNumberish,
      operatorId: BigNumberish,
      newKeysRangeStart: BigNumberish,
      newKeysRangeEnd: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_MAX_VALIDATORS(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getOperator(
      rewardAddress: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    managerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxValidatorsForModule(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    operators(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    optIn(
      optInAddress: string,
      rpcURL: string,
      moduleId: BigNumberish,
      operatorId: BigNumberish,
      keysRangeStart: BigNumberish,
      keysRangeEnd: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    optOut(
      moduleId: BigNumberish,
      operatorId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setMaxValidatorsForStakingModule(
      moduleId: BigNumberish,
      maxValidators: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    stakingRouterAddress(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    updateKeysRange(
      moduleId: BigNumberish,
      operatorId: BigNumberish,
      newKeysRangeStart: BigNumberish,
      newKeysRangeEnd: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
